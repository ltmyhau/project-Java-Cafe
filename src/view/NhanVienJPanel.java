/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import dao.NhanVienDao;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.NhanVien;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Administrator
 */
public class NhanVienJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NhanVienJPanel
     */
    DefaultTableModel model = new DefaultTableModel();

    public NhanVienJPanel() {
        initComponents();

        jtbNhanVien.getTableHeader().setBackground(new Color(0, 113, 61));
        jtbNhanVien.getTableHeader().setForeground(Color.white);
        jtbNhanVien.setFont(new Font("Times New Roman", Font.PLAIN, 15));
        jtbNhanVien.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 17));
        jtbNhanVien.getTableHeader().setPreferredSize(new Dimension(100, 35));
        jtbNhanVien.setRowHeight(35);

        addPlaceholderStyle(jtfTimKiem);

        layDuLieuTable();
        sort();
    }

    public void layDuLieuTable() {
        List<NhanVien> listNhanVien = new NhanVienDao().getList();
        model = (DefaultTableModel) jtbNhanVien.getModel();
        model.setRowCount(0);
        for (NhanVien i : listNhanVien) {
            model.addRow(new Object[]{
                i.getMaNV(),
                i.getHoTenNV(),
                i.getNgaySinh(),
                i.getGioiTinh(),
                i.getNgayVaoLam(),
                i.getDienThoai()
            });
        }
    }

    public static void hienThiTable() {
        DefaultTableModel model = new DefaultTableModel();
        List<NhanVien> listKhachHang = new NhanVienDao().getList();
        model = (DefaultTableModel) jtbNhanVien.getModel();
        model.setRowCount(0);
        for (NhanVien i : listKhachHang) {
            model.addRow(new Object[]{
                i.getMaNV(),
                i.getHoTenNV(),
                i.getNgaySinh(),
                i.getGioiTinh(),
                i.getNgayVaoLam(),
                i.getDienThoai()
            });
        }
    }

    public void sort() {
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<DefaultTableModel>(model);
        jtbNhanVien.setRowSorter(rowSorter);
    }

    public void search() {
        model = (DefaultTableModel) jtbNhanVien.getModel();
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
        jtbNhanVien.setRowSorter(rowSorter);
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + jtfTimKiem.getText()));
    }

    public void addPlaceholderStyle(JTextField jTextField) {
        Font font = jTextField.getFont();
        font = font.deriveFont(Font.ITALIC);
        jTextField.setFont(font);
        jTextField.setForeground(Color.GRAY);
    }

    public void removePlaceholderStyle(JTextField jTextField) {
        Font font = jTextField.getFont();
        font = font.deriveFont(Font.PLAIN);
        jTextField.setFont(font);
        jTextField.setForeground(Color.BLACK);
    }

    public void hienThongTin(NhanVienJFrame nhanVienJFrame, int row) {
        List<NhanVien> listNhanVien = new NhanVienDao().getList();
        NhanVien nhanVien = listNhanVien.get(row);

        nhanVienJFrame.setTitle("Thông tin nhân viên");
        nhanVienJFrame.setVisible(true);
        nhanVienJFrame.setResizable(false);
        nhanVienJFrame.setLocationRelativeTo(null);

        nhanVienJFrame.select(nhanVien);
    }

    public void openFile(String file) {
        try {
            File path = new File(file);
            Desktop.getDesktop().open(path);
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jbnThem = new javax.swing.JButton();
        jbnSua = new javax.swing.JButton();
        jbnXoa = new javax.swing.JButton();
        jpnView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbNhanVien = new javax.swing.JTable();
        jtfTimKiem = new javax.swing.JTextField();
        jbnXuatBaoCao = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 29)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 113, 61));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DANH SÁCH NHÂN VIÊN");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jbnThem.setBackground(new java.awt.Color(157, 205, 239));
        jbnThem.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jbnThem.setText("Thêm");
        jbnThem.setToolTipText("");
        jbnThem.setBorder(null);
        jbnThem.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jbnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnThemActionPerformed(evt);
            }
        });

        jbnSua.setBackground(new java.awt.Color(157, 205, 239));
        jbnSua.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jbnSua.setText("Sửa");
        jbnSua.setBorder(null);
        jbnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnSuaActionPerformed(evt);
            }
        });

        jbnXoa.setBackground(new java.awt.Color(157, 205, 239));
        jbnXoa.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jbnXoa.setText("Xóa");
        jbnXoa.setBorder(null);
        jbnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnXoaActionPerformed(evt);
            }
        });

        jpnView.setBackground(new java.awt.Color(255, 255, 255));

        jtbNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Họ và tên", "Ngày sinh", "Giới tính", "Ngày vào làm", "Điện thoại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbNhanVienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbNhanVien);

        javax.swing.GroupLayout jpnViewLayout = new javax.swing.GroupLayout(jpnView);
        jpnView.setLayout(jpnViewLayout);
        jpnViewLayout.setHorizontalGroup(
            jpnViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jpnViewLayout.setVerticalGroup(
            jpnViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
        );

        jtfTimKiem.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jtfTimKiem.setText("Tìm kiếm");
        jtfTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfTimKiemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfTimKiemFocusLost(evt);
            }
        });
        jtfTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfTimKiemKeyReleased(evt);
            }
        });

        jbnXuatBaoCao.setBackground(new java.awt.Color(157, 205, 239));
        jbnXuatBaoCao.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jbnXuatBaoCao.setText("Xuất Báo Cáo");
        jbnXuatBaoCao.setBorder(null);
        jbnXuatBaoCao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnXuatBaoCaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbnXuatBaoCao, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jtfTimKiem)
                                .addGap(108, 108, 108)
                                .addComponent(jbnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jpnView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jbnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jpnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbnXuatBaoCao, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnThemActionPerformed
        NhanVienJFrame nhanVienJFrame = new NhanVienJFrame();
        nhanVienJFrame.setTitle("Thông tin nhân viên");
        nhanVienJFrame.setVisible(true);
        nhanVienJFrame.setResizable(false);
        nhanVienJFrame.setLocationRelativeTo(null);
        nhanVienJFrame.jbnXoa.setVisible(false);
        nhanVienJFrame.jbnLuu.setText("Thêm");
        nhanVienJFrame.jbnLuu.setVisible(true);
        nhanVienJFrame.jtfMaNhanVien.setEditable(true);
    }//GEN-LAST:event_jbnThemActionPerformed

    private void jtfTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfTimKiemKeyReleased
        search();
    }//GEN-LAST:event_jtfTimKiemKeyReleased

    private void jtbNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbNhanVienMouseClicked
        NhanVienJFrame nhanVienJFrame = new NhanVienJFrame();
        int row = jtbNhanVien.getSelectedRow();
        if (evt.getClickCount() == 2) {
            hienThongTin(nhanVienJFrame, row);
        }
    }//GEN-LAST:event_jtbNhanVienMouseClicked

    private void jtfTimKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTimKiemFocusGained
        if (jtfTimKiem.getText().equals("Tìm kiếm")) {
            jtfTimKiem.setText(null);
            jtfTimKiem.requestFocus();
            removePlaceholderStyle(jtfTimKiem);
        }
    }//GEN-LAST:event_jtfTimKiemFocusGained

    private void jtfTimKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTimKiemFocusLost
        if (jtfTimKiem.getText().length() == 0) {
            addPlaceholderStyle(jtfTimKiem);
            jtfTimKiem.setText("Tìm kiếm");
        }
    }//GEN-LAST:event_jtfTimKiemFocusLost

    private void jbnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnSuaActionPerformed
        NhanVienJFrame nhanVienJFrame = new NhanVienJFrame();
        int row = jtbNhanVien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng cần cập nhật!");
        } else {
            hienThongTin(nhanVienJFrame, row);
            nhanVienJFrame.jbnXoa.setVisible(false);
        }
    }//GEN-LAST:event_jbnSuaActionPerformed

    private void jbnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnXoaActionPerformed
        NhanVienJFrame nhanVienJFrame = new NhanVienJFrame();
        int row = jtbNhanVien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng cần xóa!");
        } else {
            nhanVienJFrame.delete(jtbNhanVien.getValueAt(row, 0).toString());
        }
    }//GEN-LAST:event_jbnXoaActionPerformed

    private void jbnXuatBaoCaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnXuatBaoCaoActionPerformed
        try {
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.showSaveDialog(this);
            File saveFile = jFileChooser.getSelectedFile();

            if (saveFile != null) {
                saveFile = new File(saveFile.toString() + ".xlsx");
                XSSFWorkbook wb = new XSSFWorkbook();
                XSSFSheet sheet = wb.createSheet("Nhân Viên");

                XSSFRow row = null;
                Cell cell = null;

                row = sheet.createRow((short) 1);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("DANH SÁCH NHÂN VIÊN");

                row = sheet.createRow((short) 3);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("Mã nhân viên");
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Họ và tên");
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Ngày sinh");
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Giới tính");
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Ngày vào làm");
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Điện thoại");
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Email");
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Địa chỉ");

                List<NhanVien> listNhanVien = new NhanVienDao().getList();

                for (int i = 0; i < listNhanVien.size(); i++) {
                    NhanVien nhanVien = listNhanVien.get(i);
                    row = sheet.createRow((short) 4 + i);
                    row.setHeight((short) 400);
                    row.createCell(0).setCellValue(nhanVien.getMaNV());
                    row.createCell(1).setCellValue(nhanVien.getHoTenNV());
                    row.createCell(2).setCellValue(nhanVien.getNgaySinh().toString());
                    row.createCell(3).setCellValue(nhanVien.getGioiTinh());
                    row.createCell(4).setCellValue(nhanVien.getNgayVaoLam().toString());
                    row.createCell(5).setCellValue(nhanVien.getDienThoai());
                    row.createCell(6).setCellValue(nhanVien.getEmail());
                    row.createCell(7).setCellValue(nhanVien.getDiaChi());
                }

                FileOutputStream out = new FileOutputStream(new File(saveFile.toString()));
                wb.write(out);
                wb.close();
                out.close();
                openFile(saveFile.toString());
            } else {
                JOptionPane.showMessageDialog(null, "Không thể tạo file");
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException io) {
            System.out.println(io);
        }
    }//GEN-LAST:event_jbnXuatBaoCaoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbnSua;
    private javax.swing.JButton jbnThem;
    private javax.swing.JButton jbnXoa;
    private javax.swing.JButton jbnXuatBaoCao;
    private javax.swing.JPanel jpnView;
    private static javax.swing.JTable jtbNhanVien;
    private javax.swing.JTextField jtfTimKiem;
    // End of variables declaration//GEN-END:variables
}
